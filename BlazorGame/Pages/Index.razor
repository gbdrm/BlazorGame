@page "/"
@using BlazorGame.Data
@inject QuizService QuizService
@inject Microsoft.AspNetCore.ProtectedBrowserStorage.ProtectedLocalStorage ProtectedLocalStorage

<div class="row p-3">
    <div class="col-md-7 card">
        <div class="card-body">
            <QuizViewer Quiz="@quiz" State="@state" OnScoreChanged="@(async (int x) => await ScoreChanged(x))" ItemCreated="ItemCreated" />
        </div>
    </div>
    <div class="col-md-4 card ml-5">
        <div class="card-body">
            <h5 class="card-title">Топ 10</h5>
            <h6 class="card-subtitle mb-2 text-muted">Рейтинг правильных ответов</h6>
            <br />

            <LeaderBoard Leaders="@leaders" />

            <p class="form-group">
                @if (string.IsNullOrEmpty(state.Name))
                {
                    <EditForm Model="@state" OnValidSubmit="SetName">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="form-group">
                            <InputText class="form-control" id="name" @bind-Value="state.Name" placeholder="Ваше имя" />
                            <label style="@nameOccupiedStyle">Это имя слишком короткое или уже занято, попробуйте другое</label>
                        </div>
                    
                        <p>
                            Ваши очки: <b>@state.CurrentScore</b>
                            <button type="submit" class="btn btn-info ml-3">Добавить меня в рейтинг</button>
                        </p>
                    </EditForm>
                }
                else
                {
                    <p>
                        Ваши очки: <b>@state.CurrentScore</b>
                    </p>
                }
            </p>
        </div>
    </div>
</div>

@code {
    List<QuizItem> quiz;
    UserState state = new UserState();
    string nameOccupiedStyle = "display:none";
    Dictionary<string, int> leaders;

    protected override async Task OnInitializedAsync()
    {
        state.UserId = await ProtectedLocalStorage.GetAsync<Guid>("userId");
        if (state.UserId == Guid.Empty)
        {
            state.UserId = Guid.NewGuid();
            await ProtectedLocalStorage.SetAsync("userId", state.UserId);
        }

        state = await QuizService.GetStateAsync(state.UserId);
        quiz = await QuizService.GetQuizAsync(state.UserId);
        leaders = QuizService.GetLeaders();
    }

    async Task ScoreChanged(int score)
    {
        state.CurrentScore = score;
        quiz = await QuizService.GetQuizAsync(state.UserId);
        leaders = QuizService.GetLeaders();
        StateHasChanged();
    }

    void ItemCreated(QuizItem quizItem)
    {
        quiz.Add(quizItem);
    }

    async Task SetName()
    {
        var isOk = await QuizService.SetNameAsync(state.UserId, state.Name);
        nameOccupiedStyle = isOk ? "display:none" : "";
        if (!isOk) state.Name = null;
        leaders = QuizService.GetLeaders();
        StateHasChanged();
    }
}
