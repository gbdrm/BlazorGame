@page "/"

@using BlazorGame.Data
@inject QuizService QuizService

@using Microsoft.AspNetCore.ProtectedBrowserStorage
@inject ProtectedLocalStorage ProtectedLocalStorage

<p>Your current score is <b>@state.CurrentScore</b></p>

@if (state.CanCreate)
{
    <EditForm Model="@quizItem" OnValidSubmit="CreateNewItem">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label>You can create your own question here.</label>
            <InputText class="form-control" id="question" @bind-Value="quizItem.Question" placeholder="Question" />
        </div>
        <div class="form-group">
            <InputText class="form-control" id="answer" @bind-Value="quizItem.Answer" placeholder="Answer" />
        </div>

        <button type="submit" class="btn btn-primary">Create</button>
    </EditForm>
    <hr />
}

@if (quiz == null)
{
    <p><em>Loading...</em></p>
}
else
{
    @foreach (var quizItem in quiz)
    {
        <QuizViewer Item="@quizItem" State="@state" OnScoreChanged="ScoreChanged" />
    }
}

@code {
    List<QuizItem> quiz;
    UserState state = new UserState();
    QuizItem quizItem = new QuizItem();

    protected override async Task OnInitializedAsync()
    {
        state.UserId = await ProtectedLocalStorage.GetAsync<Guid>("userId");
        if (state.UserId == Guid.Empty)
        {
            state.UserId = Guid.NewGuid();
            await ProtectedLocalStorage.SetAsync("userId", state.UserId);
        }

        state = await QuizService.GetStateAsync(state.UserId);
        quiz = await QuizService.GetQuizesAsync(state.UserId);
    }

    public async void ScoreChanged(int score)
    {
        state.CurrentScore = score;
    }

    async Task CreateNewItem()
    {
        await QuizService.CreateQuizItemAsync(state.UserId, quizItem);
        state.CanCreate = false;
        quiz.Add(quizItem);
        quizItem = new QuizItem();
    }
}