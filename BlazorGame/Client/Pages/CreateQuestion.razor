@using BlazorGame.Data.Models
@inject HttpClient httpClient

@if (State.CanCreate)
{
    if (isShown)
    {
        <hr />
        <h6 class="card-subtitle mb-2 text-muted">Подуймайте хорошо, вы можете добавить только один вопрос</h6>

        <EditForm Model="@quizItem" OnValidSubmit="CreateNewItem">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group">
                <InputText class="form-control" id="question" @bind-Value="quizItem.Question" placeholder="Вопрос" />
            </div>
            <div class="form-group">
                <InputText class="form-control" id="answer" @bind-Value="quizItem.Answer" placeholder="Ответ" />
            </div>

            <button type="submit" class="btn-sm btn-primary">Создать</button>
        </EditForm>
        <hr />
    }
    else
    {
        <button class="btn-sm btn-info" @onclick="@(() => { isShown = true; })">Создать вопрос</button>
        <br />
    }
}

@code{
    [Parameter]
    public UserState State { get; set; }

    [Parameter]
    public EventCallback<QuizItem> OnCreated { get; set; }

    QuizItem quizItem = new QuizItem();
    bool isShown = false;

    async Task CreateNewItem()
    {
        var response = await httpClient.PostAsJsonAsync("/quiz/createquizitem/", new { State.UserId, quizItem });
        State.CanCreate = false;

        await OnCreated.InvokeAsync(quizItem);
        quizItem = new QuizItem();
    }
}