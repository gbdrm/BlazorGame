@page "/"
@using BlazorGame.Data
@inject HttpClient httpClient
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<div class="row p-3">
    <div class="col-md-7 card">
        <div class="card-body">
            <QuizViewer Quiz="@quiz" State="@state" OnScoreChanged="@(async (int x) => await ScoreChanged(x))" ItemCreated="ItemCreated" />
        </div>
    </div>
</div>

@code {
    List<QuizItem> quiz;
    UserState state = new UserState();
    string nameOccupiedStyle = "display:none";

    protected override async Task OnInitializedAsync()
    {
        state.UserId = await localStorage.GetItemAsync<Guid>("userId");
        if (state.UserId == Guid.Empty)
        {
            state.UserId = Guid.NewGuid();
            await localStorage.SetItemAsync("userId", state.UserId);
        }

        state = await httpClient.GetFromJsonAsync<UserState>("/quiz/getstate/?userId=" + state.UserId);
        quiz = await httpClient.GetFromJsonAsync<List<QuizItem>>("/quiz/getquiz/?userId=" + state.UserId);
    }

    async Task ScoreChanged(int score)
    {
        state.CurrentScore = score;
        quiz = await httpClient.GetFromJsonAsync<List<QuizItem>>("/quiz/getquiz/?userId=" + state.UserId);
        StateHasChanged();
    }

    void ItemCreated(QuizItem quizItem)
    {
        quiz.Add(quizItem);
    }
}
