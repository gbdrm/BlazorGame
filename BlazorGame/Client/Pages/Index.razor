@page "/"
@inject HttpClient httpClient
@inject Blazored.LocalStorage.ILocalStorageService localStorage

@if (state.Level >= 2)
{
    <div class="row">
        <div class="col-md-auto">
            <span class="badge badge-warning">
                Уровень <span class="badge badge-light">@state.Level</span>
            </span>
        </div>
        <div class="col">
            <div class="progress mt-1">
                <div class="progress-bar" role="progressbar" style="width: @GetExperienceWidgetWidth()" aria-valuenow="@state.Experience" aria-valuemin="0" aria-valuemax="@experienceDiff">
                    XP: @state.Experience
                </div>
            </div>
        </div>
    </div>
}

<div class="row p-3">
    <div class="col-md-7 card ml-2 mr-2 mb-2">
        <div class="card-body">
            <QuizViewer Quiz="@quiz" State="@state" OnRightAnswer="@(async (long x) => await ExperienceChanged(x))" ItemCreated="ItemCreated" />
        </div>
    </div>
    @if (state.Level >= 3)
    {
        <div class="col-md-4 card ml-2 mr-2 mb-2">
            <div class="card-body">
                <h5 class="card-title">Топ 10</h5>
                @*<h6 class="card-subtitle mb-2 text-muted">Рейтинг правильных ответов</h6>*@
                <br />

                <LeaderBoard Leaders="@leaders" />

                <p class="form-group">
                    @if (string.IsNullOrEmpty(state.Name))
                    {
                        <div class="input-group mb-3">
                            <input type="text" class="form-control" @bind="name" @onkeyup="KeyUp">
                            <div class="input-group-append">
                                <button class="btn btn-outline-secondary" type="button" @onclick="SetName">OK</button>
                            </div>
                            <label style="@nameOccupiedStyle">Это имя слишком короткое или уже занято, попробуйте другое</label>
                        </div>
                    }
                </p>
            </div>
        </div>
    }
    </div>

@if (state.Level >= 1)
{
    <div>
        @((MarkupString)status)
    </div>
}

@code {
    List<QuizItem> quiz;
    UserState state = new UserState();
    int expForNextLevel = 2;
    long experienceDiff = 2;
    string status = null;
    string nameOccupiedStyle = "display:none";
    string name;
    Dictionary<string, int> leaders;


    protected override async Task OnInitializedAsync()
    {
        state.UserId = await localStorage.GetItemAsync<Guid>("userId");
        if (state.UserId == Guid.Empty)
        {
            state.UserId = Guid.NewGuid();
            await localStorage.SetItemAsync("userId", state.UserId);
        }

        state = await httpClient.GetFromJsonAsync<UserState>("/quiz/getstate/?userId=" + state.UserId);
        quiz = await httpClient.GetFromJsonAsync<List<QuizItem>>("/quiz/getquiz/?userId=" + state.UserId);
        leaders = await httpClient.GetFromJsonAsync<Dictionary<string, int>>("/quiz/getleaders");
    }

    async Task ExperienceChanged(long exp)
    {
        int currentLevel = state.Level;
        int newLevel = (int)Math.Log(exp, 2);
        if (newLevel > currentLevel) { LevelUp(newLevel, exp); }

        state.Experience = exp;
        state.Level = newLevel;
        expForNextLevel = (int)Math.Pow(newLevel + 1, 2);

        quiz = await httpClient.GetFromJsonAsync<List<QuizItem>>("/quiz/getquiz/?userId=" + state.UserId);
        leaders = await httpClient.GetFromJsonAsync<Dictionary<string, int>>("/quiz/getleaders");
    }

    void LevelUp(int level, long exp)
    {
        status = $"<b>Уровень {level}!</b>";
        switch (level)
        {
            case 1: status = "Хорошо идем."; break;
            case 2: status += $"<br /> Новая возможность: просмотр текущего уровня и опыта"; break;
            case 3: status += $"<br /> Новая возможность: просмотр рейтинга топ 10"; break;
            case 4: status += $"<br /> Новая возможность: создание своего вопроса"; break;
            default: break;
        }
    }

    void ItemCreated(QuizItem quizItem)
    {
        quiz.Add(quizItem);
    }

    string GetExperienceWidgetWidth()
    {
        long prevExp = (int)Math.Pow(2, state.Level);
        long nextExp = (int)Math.Pow(2, state.Level + 1);
        long experienceDiff = nextExp - prevExp;
        long value = state.Experience - prevExp;

        return ((double)100 * value / experienceDiff) + "%";
    }

    async Task SetName()
    {
        var response = await httpClient.PostAsJsonAsync("/quiz/setname/", new { state.UserId, name });
        var successful = await response.Content.ReadFromJsonAsync<bool>();
        if (response.IsSuccessStatusCode && successful)
        {
            leaders = await httpClient.GetFromJsonAsync<Dictionary<string, int>>("/quiz/getleaders");
            nameOccupiedStyle = "display:none";
            state.Name = name;
        }
        else
        {
            state.Name = null;
            nameOccupiedStyle = string.Empty;
        }
    }

    async Task KeyUp(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SetName();
        }
    }
}
