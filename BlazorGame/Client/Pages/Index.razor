@page "/"
@inject HttpClient httpClient
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<div class="row">
    <div class="col-md-auto">
        <span class="badge badge-warning">
            Уровень <span class="badge badge-light">@state.Level</span>
        </span>
    </div>
    <div class="col">
        <div class="progress mt-1">
            <div class="progress-bar" role="progressbar" style="width: @GetExperienceWidgetWidth()" aria-valuenow="@state.Experience" aria-valuemin="0" aria-valuemax="@experienceDiff">
                XP: @state.Experience
            </div>
        </div>
    </div>
</div>

<div class="row p-3">
    <div class="col-md-7 card">
        <div class="card-body">
            <QuizViewer Quiz="@quiz" State="@state" OnRightAnswer="@(async (long x) => await ExperienceChanged(x))" ItemCreated="ItemCreated" />
        </div>
    </div>
</div>

@code {
    List<QuizItem> quiz;
    UserState state = new UserState();
    int nextLevel = 2;
    long experienceDiff = 2;

    protected override async Task OnInitializedAsync()
    {
        state.UserId = await localStorage.GetItemAsync<Guid>("userId");
        if (state.UserId == Guid.Empty)
        {
            state.UserId = Guid.NewGuid();
            await localStorage.SetItemAsync("userId", state.UserId);
        }

        state = await httpClient.GetFromJsonAsync<UserState>("/quiz/getstate/?userId=" + state.UserId);
        quiz = await httpClient.GetFromJsonAsync<List<QuizItem>>("/quiz/getquiz/?userId=" + state.UserId);
    }

    async Task ExperienceChanged(long exp)
    {
        state.Experience = exp;
        state.Level = (int)Math.Log(exp, 2);
        nextLevel = (int)Math.Pow(state.Level + 1, 2);
        quiz = await httpClient.GetFromJsonAsync<List<QuizItem>>("/quiz/getquiz/?userId=" + state.UserId);
        StateHasChanged();
    }

    void ItemCreated(QuizItem quizItem)
    {
        quiz.Add(quizItem);
    }

    string GetExperienceWidgetWidth()
    {
        long prevExp = (int)Math.Pow(2, state.Level);
        long nextExp = (int)Math.Pow(2, state.Level + 1);
        long experienceDiff = nextExp - prevExp;
        long value = state.Experience - prevExp;

        return ((double)100 * value / experienceDiff) + "%";
    }
}
